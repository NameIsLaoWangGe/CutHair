{
  "code": "import { lwg, Click, Tools, EventAdmin } from \"../Lwg_Template/lwg\";\r\nimport { GVariate, GEnum } from \"../Lwg_Template/Global\";\r\nexport default class UIOperation extends lwg.Admin.Scene {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.Capsule = new Laya.MeshSprite3D();\r\n        this.Landmark_Left = new Laya.MeshSprite3D();\r\n        this.Landmark_Right = new Laya.MeshSprite3D();\r\n        this.Landmark_Side = new Laya.MeshSprite3D();\r\n        this.Landmark_Top = new Laya.MeshSprite3D();\r\n        this._ray = new Laya.Ray(new Laya.Vector3(0, 0, 0), new Laya.Vector3(0, 0, 0));\r\n        this.outs = new Array();\r\n        this.HairParent = new Laya.MeshSprite3D();\r\n        this.cameraAndRazorPos = new Laya.Vector3();\r\n        this.moveTime = 1000;\r\n        this.moveSwitch = false;\r\n    }\r\n    ;\r\n    selfNode() {\r\n        this.Rocker = this.self['Rocker'];\r\n        this.GameMain3D = lwg.Admin._sceneControl[lwg.Admin.SceneName.GameMain3D];\r\n        this.MainCamera = this.GameMain3D['GameMain3D'].MainCamera;\r\n        this.Razor = this.GameMain3D['GameMain3D'].Razor;\r\n        this.knife = this.GameMain3D['GameMain3D'].knife;\r\n        this.Landmark_Left = this.GameMain3D['GameMain3D'].Landmark_Left;\r\n        this.Landmark_Right = this.GameMain3D['GameMain3D'].Landmark_Right;\r\n        this.Landmark_Side = this.GameMain3D['GameMain3D'].Landmark_Side;\r\n        this.Landmark_Top = this.GameMain3D['GameMain3D'].Landmark_Top;\r\n        this.Capsule = this.GameMain3D['GameMain3D'].Capsule;\r\n        this.HairParent = this.GameMain3D['GameMain3D'].HairParent;\r\n        this.TaskBar = this.self['TaskBar'];\r\n        this.BtnLast = this.self['BtnLast'];\r\n    }\r\n    lwgOnEnable() {\r\n        GVariate._taskNum = 0;\r\n        lwg.Admin._gameStart = true;\r\n        GVariate._taskArr = [GEnum.TaskType.sideHair, GEnum.TaskType.rightBeard, GEnum.TaskType.leftBeard];\r\n        this.createProgress();\r\n        this.BtnLast.visible = false;\r\n        EventAdmin.EventClass.reg(GEnum.EventType.taskReach, this, () => {\r\n            this.BtnLast.visible = true;\r\n        });\r\n        this.createTaskContent();\r\n    }\r\n    createProgress() {\r\n        for (let index = 0; index < GVariate._taskArr.length; index++) {\r\n            const TaskPro = Laya.Pool.getItemByCreateFun('TaskPro', this.TaskProgress.create, this.TaskProgress);\r\n            this.TaskBar.addChild(TaskPro);\r\n            TaskPro.pos(index * 100, 0);\r\n            let Bar = TaskPro.getChildByName('Bar');\r\n            let Mask = Bar.mask;\r\n            Mask.scaleX = 0;\r\n        }\r\n    }\r\n    createTaskContent() {\r\n        for (let index = 0; index < GVariate._taskArr.length; index++) {\r\n            switch (GVariate._taskArr[index]) {\r\n                case GEnum.TaskType.sideHair:\r\n                    GVariate._sideHairNum.setValue = this.HairParent.numChildren;\r\n                    break;\r\n                case GEnum.TaskType.sideHair:\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    btnOnClick() {\r\n        lwg.Click.on(Click.ClickType.largen, null, this.BtnLast, this, null, null, this.btnLastUp, null);\r\n    }\r\n    btnLastUp(e) {\r\n        e.stopPropagation();\r\n        GVariate._taskNum++;\r\n        this.mainCameraMove();\r\n    }\r\n    mainCameraMove() {\r\n        if (GVariate._taskNum > GVariate._taskArr.length) {\r\n            return;\r\n        }\r\n        switch (GVariate._taskArr[GVariate._taskNum]) {\r\n            case GEnum.TaskType.leftBeard:\r\n                this.setCamera(this.Landmark_Left.transform.position, this.Landmark_Left.transform.localRotationEuler, this.moveTime);\r\n                break;\r\n            case GEnum.TaskType.rightBeard:\r\n                this.setCamera(this.Landmark_Right.transform.position, this.Landmark_Right.transform.localRotationEuler, this.moveTime);\r\n                break;\r\n            case GEnum.TaskType.sideHair:\r\n                this.setCamera(this.Landmark_Side.transform.position, this.Landmark_Side.transform.localRotationEuler, this.moveTime);\r\n                break;\r\n            case GEnum.TaskType.topHead:\r\n                this.setCamera(this.Landmark_Top.transform.position, this.Landmark_Top.transform.localRotationEuler, this.moveTime);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    setCamera(v3_Pos, v3_Rotate, time) {\r\n        let moveTarget = this.MainCamera.transform.position;\r\n        Laya.Tween.to(moveTarget, {\r\n            x: v3_Pos.x, y: v3_Pos.y, z: v3_Pos.z, update: new Laya.Handler(this, f => {\r\n                this.MainCamera.transform.position = (new Laya.Vector3(moveTarget.x, moveTarget.y, moveTarget.z));\r\n            })\r\n        }, time, null);\r\n        let rotateTarget = this.MainCamera.transform.localRotationEuler;\r\n        Laya.Tween.to(rotateTarget, {\r\n            x: v3_Rotate.x, y: v3_Rotate.y, z: v3_Rotate.z, update: new Laya.Handler(this, f => {\r\n                this.MainCamera.transform.localRotationEulerX = (new Laya.Vector3(rotateTarget.x, rotateTarget.y, rotateTarget.z)).x;\r\n                this.MainCamera.transform.localRotationEulerY = (new Laya.Vector3(rotateTarget.x, rotateTarget.y, rotateTarget.z)).y;\r\n                this.MainCamera.transform.localRotationEulerZ = (new Laya.Vector3(rotateTarget.x, rotateTarget.y, rotateTarget.z)).z;\r\n            })\r\n        }, time, null);\r\n    }\r\n    onStageMouseDown(e) {\r\n        this.moveSwitch = true;\r\n        this.touchPosX = e.stageX;\r\n        this.touchPosY = e.stageY;\r\n    }\r\n    onStageMouseMove(e) {\r\n        if (this.moveSwitch) {\r\n            let diffX = e.stageX - this.touchPosX;\r\n            let diffY = e.stageY - this.touchPosY;\r\n            this.Rocker.x += diffX;\r\n            this.Rocker.y += diffY;\r\n            this.touchPosX = e.stageX;\r\n            this.touchPosY = e.stageY;\r\n            switch (GVariate._taskArr[GVariate._taskNum]) {\r\n                case GEnum.TaskType.sideHair:\r\n                    this.Razor.transform.localPositionX -= diffX * 0.01;\r\n                    this.Razor.transform.localPositionY -= diffY * 0.01;\r\n                    break;\r\n                case GEnum.TaskType.leftBeard:\r\n                    this.leftAndRightShaving();\r\n                    break;\r\n                case GEnum.TaskType.rightBeard:\r\n                    this.leftAndRightShaving();\r\n                    break;\r\n                case GEnum.TaskType.topHead:\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    leftAndRightShaving() {\r\n        let hitResult = this.rayDetection();\r\n        if (hitResult) {\r\n            let p = Tools.twoSubV3_3D(hitResult.point, this.Capsule.transform.position, true);\r\n            let len = Tools.twoObjectsLen_3D(this.knife, this.Capsule);\r\n            let unit = 0.1 * (1.05 - len);\r\n            this.knife.transform.position = new Laya.Vector3(hitResult.point.x + p.x * unit, hitResult.point.y + p.y * unit, hitResult.point.z + p.z * unit);\r\n            this.knife.transform.lookAt(this.Capsule.transform.position, new Laya.Vector3(0, 1, 0));\r\n        }\r\n    }\r\n    rayDetection() {\r\n        let Camera = this.MainCamera.getChildByName('MainCamera');\r\n        Camera.viewportPointToRay(new Laya.Vector2(this.touchPosX, this.touchPosY), this._ray);\r\n        this.GameMain3D.physicsSimulation.rayCastAll(this._ray, this.outs);\r\n        if (this.outs.length != 0) {\r\n            let outsChaild = null;\r\n            let Capsule = null;\r\n            for (var i = 0; i < this.outs.length; i++) {\r\n                let hitResult = this.outs[i].collider.owner;\r\n                if (hitResult.name === 'Capsule') {\r\n                    Capsule = hitResult;\r\n                    outsChaild = this.outs[i];\r\n                }\r\n            }\r\n            return outsChaild;\r\n        }\r\n    }\r\n    onStageMouseUp(e) {\r\n        this.moveSwitch = false;\r\n    }\r\n    lwgOnUpdate() {\r\n    }\r\n}\r\n",
  "references": [
    "D:/Game/project/CutHair/Project/CutHair/src/script/Lwg_Template/lwg.ts",
    "D:/Game/project/CutHair/Project/CutHair/src/script/Lwg_Template/Global.ts"
  ]
}
