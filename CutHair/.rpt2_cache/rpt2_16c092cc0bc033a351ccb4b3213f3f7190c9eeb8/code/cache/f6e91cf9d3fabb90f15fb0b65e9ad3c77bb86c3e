{
  "code": "import { lwg, Click, Animation3D } from \"../Lwg_Template/lwg\";\r\nimport { G, GEnum } from \"../Lwg_Template/Global\";\r\nexport default class UIOperation extends lwg.Admin.Scene {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.Landmark_Left = new Laya.MeshSprite3D();\r\n        this.Landmark_Right = new Laya.MeshSprite3D();\r\n        this.Landmark_Side = new Laya.MeshSprite3D();\r\n        this.Landmark_Top = new Laya.MeshSprite3D();\r\n        this.cameraAndRazorPos = new Laya.Vector3();\r\n        this.moveTime = 1000;\r\n        this.moveSwitch = false;\r\n        this.speed = 0.09;\r\n    }\r\n    selfNode() {\r\n        this.Rocker = this.self['Rocker'];\r\n        this.MainCamera = lwg.Admin._sceneControl[lwg.Admin.SceneName.GameMain3D]['GameMain3D'].MainCamera;\r\n        this.Razor = lwg.Admin._sceneControl[lwg.Admin.SceneName.GameMain3D]['GameMain3D'].Razor;\r\n        this.knife = lwg.Admin._sceneControl[lwg.Admin.SceneName.GameMain3D]['GameMain3D'].knife;\r\n        this.Landmark_Left = lwg.Admin._sceneControl[lwg.Admin.SceneName.GameMain3D]['GameMain3D'].Landmark_Left;\r\n        this.Landmark_Right = lwg.Admin._sceneControl[lwg.Admin.SceneName.GameMain3D]['GameMain3D'].Landmark_Right;\r\n        this.Landmark_Side = lwg.Admin._sceneControl[lwg.Admin.SceneName.GameMain3D]['GameMain3D'].Landmark_Side;\r\n        this.Landmark_Top = lwg.Admin._sceneControl[lwg.Admin.SceneName.GameMain3D]['GameMain3D'].Landmark_Top;\r\n    }\r\n    lwgOnEnable() {\r\n        lwg.Admin._gameStart = true;\r\n        G._taskArr = [GEnum.TaskType.sideHair, GEnum.TaskType.rightBeard, GEnum.TaskType.leftBeard];\r\n    }\r\n    btnOnClick() {\r\n        lwg.Click.on(Click.ClickType.largen, null, this.self['BtnLast'], this, this.btnAgainDown, null, this.btnAgainUp, null);\r\n    }\r\n    btnAgainDown(e) {\r\n        e.stopPropagation();\r\n    }\r\n    btnAgainUp(e) {\r\n        e.stopPropagation();\r\n        this.mainCameraMove();\r\n        G._taskNum++;\r\n    }\r\n    mainCameraMove() {\r\n        if (G._taskNum > G._taskArr.length) {\r\n            return;\r\n        }\r\n        switch (G._taskArr[G._taskNum]) {\r\n            case GEnum.TaskType.leftBeard:\r\n                Animation3D.Pos_Euler(this.MainCamera, this.Landmark_Left.transform.position, this.Landmark_Side.transform.localRotationEuler, this.moveTime);\r\n                break;\r\n            case GEnum.TaskType.rightBeard:\r\n                Animation3D.Pos_Euler(this.MainCamera, this.Landmark_Right.transform.position, this.Landmark_Side.transform.localRotationEuler, this.moveTime);\r\n                break;\r\n            case GEnum.TaskType.sideHair:\r\n                Animation3D.Pos_Euler(this.MainCamera, this.Landmark_Side.transform.position, this.Landmark_Side.transform.localRotationEuler, this.moveTime);\r\n                break;\r\n            case GEnum.TaskType.topHead:\r\n                Animation3D.Pos_Euler(this.MainCamera, this.Landmark_Top.transform.position, this.Landmark_Top.transform.localRotationEuler, this.moveTime);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    setCamera(v3_Pos, v3_Rotate, time) {\r\n        let moveTarget = this.MainCamera.transform.position;\r\n        Laya.Tween.to(moveTarget, {\r\n            x: v3_Pos.x, y: v3_Pos.y, z: v3_Pos.z, update: new Laya.Handler(this, f => {\r\n                this.MainCamera.transform.position = (new Laya.Vector3(moveTarget.x, moveTarget.y, moveTarget.z));\r\n            })\r\n        }, time, null);\r\n        let rotateTarget = this.MainCamera.transform.localRotationEuler;\r\n        Laya.Tween.to(rotateTarget, {\r\n            x: v3_Rotate.x, y: v3_Rotate.y, z: v3_Rotate.z, update: new Laya.Handler(this, f => {\r\n                this.MainCamera.transform.localRotationEulerX = (new Laya.Vector3(rotateTarget.x, rotateTarget.y, rotateTarget.z)).x;\r\n                this.MainCamera.transform.localRotationEulerY = (new Laya.Vector3(rotateTarget.x, rotateTarget.y, rotateTarget.z)).y;\r\n                this.MainCamera.transform.localRotationEulerZ = (new Laya.Vector3(rotateTarget.x, rotateTarget.y, rotateTarget.z)).z;\r\n            })\r\n        }, time, null);\r\n    }\r\n    onStageMouseDown(e) {\r\n        this.moveSwitch = true;\r\n        this.touchPosX = e.stageX;\r\n        this.touchPosY = e.stageY;\r\n    }\r\n    onStageMouseMove(e) {\r\n        if (this.moveSwitch) {\r\n            let diffX = e.stageX - this.touchPosX;\r\n            let diffY = e.stageY - this.touchPosY;\r\n            this.Rocker.x += diffX;\r\n            this.Rocker.y += diffY;\r\n            this.touchPosX = e.stageX;\r\n            this.touchPosY = e.stageY;\r\n            console.log(G._taskArr[G._taskNum]);\r\n            switch (G._taskArr[G._taskNum]) {\r\n                case GEnum.TaskType.sideHair:\r\n                    this.Razor.transform.localPositionX -= diffX * 0.01;\r\n                    this.Razor.transform.localPositionY -= diffY * 0.01;\r\n                    break;\r\n                case GEnum.TaskType.leftBeard:\r\n                    break;\r\n                case GEnum.TaskType.rightBeard:\r\n                    this.knife.transform.localPositionX -= diffX * 0.01;\r\n                    this.knife.transform.localPositionY -= diffY * 0.01;\r\n                    break;\r\n                case GEnum.TaskType.topHead:\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    onStageMouseUp(e) {\r\n        this.moveSwitch = false;\r\n    }\r\n    RazorFellowGuide() {\r\n        let p = lwg.Tools.twoSubV3_3D(this.Razor.transform.position, this.Guide.transform.position);\r\n        let normalizP = new Laya.Vector3();\r\n        Laya.Vector3.normalize(p, normalizP);\r\n        this.Razor.transform.localPositionX -= normalizP.x * this.speed;\r\n        this.Razor.transform.localPositionZ -= normalizP.z * this.speed;\r\n    }\r\n    cameraFellowRazor() {\r\n        this.MainCamera.transform.localPositionX = this.Razor.transform.position.x - this.cameraAndRazorPos.x;\r\n        this.MainCamera.transform.localPositionZ = this.Razor.transform.position.z - this.cameraAndRazorPos.z;\r\n    }\r\n    lwgOnUpdate() {\r\n    }\r\n}\r\n",
  "references": [
    "D:/Game/project/CutHair/Project/CutHair/src/script/Lwg_Template/lwg.ts",
    "D:/Game/project/CutHair/Project/CutHair/src/script/Lwg_Template/Global.ts"
  ]
}
