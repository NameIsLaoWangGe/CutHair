{
  "code": "import { lwg, Click, Animation3D, Tools, EventAdmin, Admin } from \"../Lwg_Template/lwg\";\r\nimport { GVariate, GEnum, GSene3D } from \"../Lwg_Template/Global\";\r\nexport default class UIOperation extends lwg.Admin.Scene {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._numZoder = [];\r\n        this._sideHairNum = {\r\n            index: 0,\r\n            sum: 0,\r\n            switch: true,\r\n            value: 0,\r\n            set setValue(vals) {\r\n                this.value = vals;\r\n                if (this.switch) {\r\n                    console.log('剩余需要修理的头发', this.value);\r\n                    if (this.value <= 3) {\r\n                        this.switch = false;\r\n                        console.log('任务完成了！');\r\n                        EventAdmin.notify(EventAdmin.EventType.taskReach);\r\n                    }\r\n                }\r\n                EventAdmin.notify(GEnum.EventType.taskProgress);\r\n            }\r\n        };\r\n        this._leftBeardNum = {\r\n            index: 0,\r\n            sum: 0,\r\n            switch: true,\r\n            value: 0,\r\n            set setValue(vals) {\r\n                this.value = vals;\r\n                if (this.switch) {\r\n                    console.log('剩余左侧胡须', this.value);\r\n                    if (this.value <= 3) {\r\n                        console.log('任务完成了！');\r\n                        this.switch = false;\r\n                        EventAdmin.notify(EventAdmin.EventType.taskReach);\r\n                    }\r\n                }\r\n                EventAdmin.notify(GEnum.EventType.taskProgress);\r\n            }\r\n        };\r\n        this._rightBeardNum = {\r\n            index: 0,\r\n            sum: 0,\r\n            switch: true,\r\n            value: 0,\r\n            set setValue(vals) {\r\n                this.value = vals;\r\n                if (this.switch) {\r\n                    console.log('剩余剩余右侧胡须', this.value);\r\n                    if (this.value <= 3) {\r\n                        console.log('任务完成了！');\r\n                        this.switch = false;\r\n                        EventAdmin.notify(EventAdmin.EventType.taskReach);\r\n                    }\r\n                }\r\n                EventAdmin.notify(GEnum.EventType.taskProgress);\r\n            }\r\n        };\r\n        this._middleBeardNum = {\r\n            index: 0,\r\n            sum: 0,\r\n            switch: true,\r\n            value: 0,\r\n            set setValue(vals) {\r\n                this.value = vals;\r\n                if (this.switch) {\r\n                    console.log('剩余中间胡子', this.value);\r\n                    if (this.value <= 3) {\r\n                        console.log('任务完成了！');\r\n                        this.switch = false;\r\n                        EventAdmin.notify(EventAdmin.EventType.taskReach);\r\n                    }\r\n                }\r\n                EventAdmin.notify(GEnum.EventType.taskProgress);\r\n            }\r\n        };\r\n        this._upRightBeardNum = {\r\n            index: 0,\r\n            sum: 0,\r\n            switch: true,\r\n            value: 0,\r\n            set setValue(vals) {\r\n                this.value = vals;\r\n                if (this.switch) {\r\n                    console.log('剩余右上角', this.value);\r\n                    if (this.value <= 3) {\r\n                        console.log('任务完成了！');\r\n                        this.switch = false;\r\n                        EventAdmin.notify(EventAdmin.EventType.taskReach);\r\n                    }\r\n                }\r\n                EventAdmin.notify(GEnum.EventType.taskProgress);\r\n            }\r\n        };\r\n        this._upLeftBeardNum = {\r\n            index: 0,\r\n            sum: 0,\r\n            switch: true,\r\n            value: 0,\r\n            set setValue(vals) {\r\n                this.value = vals;\r\n                if (this.switch) {\r\n                    console.log('剩余左上角', this.value);\r\n                    if (this.value <= 3) {\r\n                        console.log('任务完成了！');\r\n                        this.switch = false;\r\n                        EventAdmin.notify(EventAdmin.EventType.taskReach);\r\n                    }\r\n                }\r\n                EventAdmin.notify(GEnum.EventType.taskProgress);\r\n            }\r\n        };\r\n        this.moveSpeed = 1000;\r\n        this.moveSwitch = false;\r\n    }\r\n    selfNode() {\r\n        this.Rocker = this.self['Rocker'];\r\n        this.TaskBar = this.self['TaskBar'];\r\n        this.BtnLast = this.self['BtnLast'];\r\n        this.Dialogue = this.self['Dialogue'];\r\n    }\r\n    lwgOnEnable() {\r\n        GVariate._taskNum = 0;\r\n        lwg.Admin._gameStart = true;\r\n        GVariate._taskArr = [GEnum.TaskType.sideHair, GEnum.TaskType.rightBeard, GEnum.TaskType.middleBeard, GEnum.TaskType.leftBeard, GEnum.TaskType.upRightBeard, GEnum.TaskType.upLeftBeard];\r\n        this.createProgress();\r\n        this.BtnLast.visible = false;\r\n        this.createTaskContent();\r\n        this.mainCameraMove();\r\n        this.dialogueSet();\r\n    }\r\n    lwgEventReg() {\r\n        EventAdmin.reg(EventAdmin.EventType.taskReach, this, () => {\r\n            if (GVariate._taskNum >= GVariate._taskArr.length - 1) {\r\n                Laya.timer.frameOnce(60, this, () => {\r\n                    Admin._openScene(Admin.SceneName.UIVictory, null, null, () => { });\r\n                });\r\n            }\r\n            else {\r\n                this.BtnLast.visible = true;\r\n            }\r\n        });\r\n        EventAdmin.reg(EventAdmin.EventType.defeated, this, () => {\r\n            Admin._gameStart = false;\r\n            Admin._openScene(Admin.SceneName.UIDefeated, null, null, f => { });\r\n        });\r\n        EventAdmin.reg(EventAdmin.EventType.operrationRefresh, this, () => {\r\n            lwg.Admin._openScene(Admin.SceneName.UIOperation, null, this.self, () => { });\r\n        });\r\n        EventAdmin.reg(GEnum.EventType.leftBeard, this, () => {\r\n            this._leftBeardNum.setValue = this._leftBeardNum.value - 0.5;\r\n        });\r\n        EventAdmin.reg(GEnum.EventType.rightBeard, this, () => {\r\n            this._rightBeardNum.setValue = this._rightBeardNum.value - 0.5;\r\n        });\r\n        EventAdmin.reg(GEnum.EventType.middleBeard, this, () => {\r\n            this._middleBeardNum.setValue = this._middleBeardNum.value - 0.5;\r\n        });\r\n        EventAdmin.reg(GEnum.EventType.upRightBeard, this, () => {\r\n            this._upRightBeardNum.setValue = this._upRightBeardNum.value - 0.5;\r\n        });\r\n        EventAdmin.reg(GEnum.EventType.upLeftBeard, this, () => {\r\n            this._upLeftBeardNum.setValue = this._upLeftBeardNum.value - 0.5;\r\n        });\r\n        EventAdmin.reg(GEnum.EventType.taskProgress, this, () => {\r\n            let TaskBar = this.TaskBar.getChildAt(GVariate._taskNum);\r\n            let Bar = TaskBar.getChildByName('Bar');\r\n            let sum;\r\n            let value;\r\n            switch (GVariate._taskArr[GVariate._taskNum]) {\r\n                case GEnum.TaskType.sideHair:\r\n                    value = this._sideHairNum.value;\r\n                    sum = this._sideHairNum.sum;\r\n                    break;\r\n                case GEnum.TaskType.leftBeard:\r\n                    value = this._leftBeardNum.value;\r\n                    sum = this._leftBeardNum.sum;\r\n                    break;\r\n                case GEnum.TaskType.rightBeard:\r\n                    value = this._rightBeardNum.value;\r\n                    sum = this._rightBeardNum.sum;\r\n                    break;\r\n                case GEnum.TaskType.middleBeard:\r\n                    value = this._middleBeardNum.value;\r\n                    sum = this._middleBeardNum.sum;\r\n                    break;\r\n                case GEnum.TaskType.upRightBeard:\r\n                    value = this._upRightBeardNum.value;\r\n                    sum = this._upRightBeardNum.sum;\r\n                    break;\r\n                case GEnum.TaskType.upLeftBeard:\r\n                    value = this._upLeftBeardNum.value;\r\n                    sum = this._upLeftBeardNum.sum;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            Bar.mask.x = (sum - value) * Bar.width / sum - Bar.mask.width;\r\n            if (Bar.mask.x > 0) {\r\n                Bar.mask.x = 0;\r\n            }\r\n        });\r\n    }\r\n    dialogueSet() {\r\n        this.Dialogue.visible = false;\r\n        Laya.timer.once(3000, this, () => {\r\n            this.Dialogue.visible = true;\r\n            Laya.timer.once(2000, this, () => {\r\n                let Dec = this.Dialogue.getChildByName('Dec');\r\n                Dec.text = ' 理发剃须看广告!';\r\n                Laya.timer.once(2000, this, () => {\r\n                    this.Dialogue.visible = false;\r\n                });\r\n            });\r\n        });\r\n    }\r\n    createProgress() {\r\n        let spacing = 100;\r\n        for (let index = 0; index < GVariate._taskArr.length; index++) {\r\n            const TaskPro = Laya.Pool.getItemByCreateFun('TaskPro', this.TaskProgress.create, this.TaskProgress);\r\n            this.TaskBar.addChild(TaskPro);\r\n            TaskPro.pos(index * spacing, 0);\r\n            let Bar = TaskPro.getChildByName('Bar');\r\n        }\r\n        this.TaskBar.width = GVariate._taskArr.length * spacing;\r\n        this.TaskBar.pivotX = this.TaskBar.width / 2;\r\n        this.TaskBar.x = Laya.stage.width / 2;\r\n    }\r\n    createTaskContent() {\r\n        for (let index = 0; index < GVariate._taskArr.length; index++) {\r\n            switch (GVariate._taskArr[index]) {\r\n                case GEnum.TaskType.sideHair:\r\n                    this._sideHairNum.setValue = GSene3D.HairParent.numChildren;\r\n                    this._sideHairNum.sum = GSene3D.HairParent.numChildren;\r\n                    this._sideHairNum.index = index;\r\n                    this.monitorHiarLen();\r\n                    this._numZoder.push(this._sideHairNum);\r\n                    break;\r\n                case GEnum.TaskType.leftBeard:\r\n                    this._leftBeardNum.setValue = GSene3D.LeftBeard.numChildren;\r\n                    this._leftBeardNum.sum = GSene3D.LeftBeard.numChildren;\r\n                    this._leftBeardNum.index = index;\r\n                    this._numZoder.push(this._leftBeardNum);\r\n                    break;\r\n                case GEnum.TaskType.rightBeard:\r\n                    this._rightBeardNum.setValue = GSene3D.RightBeard.numChildren;\r\n                    this._rightBeardNum.sum = GSene3D.RightBeard.numChildren;\r\n                    this._rightBeardNum.index = index;\r\n                    this._numZoder.push(this._rightBeardNum);\r\n                    break;\r\n                case GEnum.TaskType.middleBeard:\r\n                    this._middleBeardNum.setValue = GSene3D.RightBeard.numChildren;\r\n                    this._middleBeardNum.sum = GSene3D.RightBeard.numChildren;\r\n                    this._middleBeardNum.index = index;\r\n                    this._numZoder.push(this._middleBeardNum);\r\n                    break;\r\n                case GEnum.TaskType.upRightBeard:\r\n                    this._upRightBeardNum.setValue = GSene3D.UpRightBeard.numChildren;\r\n                    this._upRightBeardNum.sum = GSene3D.UpRightBeard.numChildren;\r\n                    this._upRightBeardNum.index = index;\r\n                    this._numZoder.push(this._upRightBeardNum);\r\n                    break;\r\n                case GEnum.TaskType.upLeftBeard:\r\n                    this._upLeftBeardNum.setValue = GSene3D.UpLeftBeard.numChildren;\r\n                    this._upLeftBeardNum.sum = GSene3D.UpLeftBeard.numChildren;\r\n                    this._upLeftBeardNum.index = index;\r\n                    this._numZoder.push(this._upLeftBeardNum);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        console.log(this._numZoder);\r\n    }\r\n    monitorHiarLen() {\r\n        let _sideHairNum = this._sideHairNum;\r\n        for (let index = 0; index < GSene3D.HairParent.numChildren; index++) {\r\n            const element = GSene3D.HairParent.getChildAt(index);\r\n            let len = element.transform.localPositionY;\r\n            element['HairLen'] = {\r\n                detection: true,\r\n                value: len,\r\n                get getValue() {\r\n                    return this.value;\r\n                },\r\n                set setValue(v) {\r\n                    if (this.detection) {\r\n                        if (v < 0.13) {\r\n                            this.detection = false;\r\n                            _sideHairNum.setValue = _sideHairNum.value - 1;\r\n                        }\r\n                        this.value = v;\r\n                    }\r\n                    else {\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n    mainCameraMove() {\r\n        if (GVariate._taskNum > GVariate._taskArr.length) {\r\n            return;\r\n        }\r\n        switch (GVariate._taskArr[GVariate._taskNum]) {\r\n            case GEnum.TaskType.sideHair:\r\n                Animation3D.MoveTo(GSene3D.MainCamera, GSene3D.Landmark_Side.transform.position, this.moveSpeed, this);\r\n                Animation3D.RotateTo(GSene3D.MainCamera, GSene3D.Landmark_Side.transform.localRotationEuler, this.moveSpeed, this);\r\n                Animation3D.RotateTo(GSene3D.TouchScreen, GSene3D.Landmark_Side.transform.localRotationEuler, this.moveSpeed, this);\r\n                break;\r\n            case GEnum.TaskType.rightBeard:\r\n                GSene3D.knife.transform.position = GSene3D.RightSignknife.transform.position;\r\n                GSene3D.knife.transform.localRotationEuler = GSene3D.RightSignknife.transform.localRotationEuler;\r\n                Animation3D.MoveTo(GSene3D.MainCamera, GSene3D.Landmark_Right.transform.position, this.moveSpeed, this);\r\n                Animation3D.RotateTo(GSene3D.MainCamera, GSene3D.Landmark_Right.transform.localRotationEuler, this.moveSpeed, this);\r\n                Animation3D.RotateTo(GSene3D.TouchScreen, GSene3D.Landmark_Right.transform.localRotationEuler, this.moveSpeed, this);\r\n                break;\r\n            case GEnum.TaskType.leftBeard:\r\n                GSene3D.knife.transform.position = GSene3D.LeftSignknife.transform.position;\r\n                GSene3D.knife.transform.localRotationEuler = GSene3D.LeftSignknife.transform.localRotationEuler;\r\n                Animation3D.MoveTo(GSene3D.MainCamera, GSene3D.Landmark_Left.transform.position, this.moveSpeed, this);\r\n                Animation3D.RotateTo(GSene3D.MainCamera, GSene3D.Landmark_Left.transform.localRotationEuler, this.moveSpeed, this);\r\n                Animation3D.RotateTo(GSene3D.TouchScreen, GSene3D.Landmark_Left.transform.localRotationEuler, this.moveSpeed, this);\r\n                break;\r\n            case GEnum.TaskType.middleBeard:\r\n                GSene3D.knife.transform.position = GSene3D.MiddleSignknife.transform.position;\r\n                GSene3D.knife.transform.localRotationEuler = GSene3D.MiddleSignknife.transform.localRotationEuler;\r\n                Animation3D.MoveTo(GSene3D.MainCamera, GSene3D.Landmark_Middle.transform.position, this.moveSpeed, this);\r\n                Animation3D.RotateTo(GSene3D.MainCamera, GSene3D.Landmark_Middle.transform.localRotationEuler, this.moveSpeed, this);\r\n                Animation3D.RotateTo(GSene3D.TouchScreen, GSene3D.Landmark_Middle.transform.localRotationEuler, this.moveSpeed, this);\r\n                break;\r\n            case GEnum.TaskType.upLeftBeard:\r\n                GSene3D.knife.transform.position = GSene3D.UpLeftKnife.transform.position;\r\n                GSene3D.knife.transform.localRotationEuler = GSene3D.UpLeftKnife.transform.localRotationEuler;\r\n                Animation3D.MoveTo(GSene3D.MainCamera, GSene3D.Landmark_UpLeft.transform.position, this.moveSpeed, this);\r\n                Animation3D.RotateTo(GSene3D.MainCamera, GSene3D.Landmark_UpLeft.transform.localRotationEuler, this.moveSpeed, this);\r\n                Animation3D.RotateTo(GSene3D.TouchScreen, GSene3D.Landmark_UpLeft.transform.localRotationEuler, this.moveSpeed, this);\r\n                break;\r\n            case GEnum.TaskType.upRightBeard:\r\n                GSene3D.knife.transform.position = GSene3D.UpRightKnife.transform.position;\r\n                GSene3D.knife.transform.localRotationEuler = GSene3D.UpRightKnife.transform.localRotationEuler;\r\n                Animation3D.MoveTo(GSene3D.MainCamera, GSene3D.Landmark_UpRight.transform.position, this.moveSpeed, this);\r\n                Animation3D.RotateTo(GSene3D.MainCamera, GSene3D.Landmark_UpRight.transform.localRotationEuler, this.moveSpeed, this);\r\n                Animation3D.RotateTo(GSene3D.TouchScreen, GSene3D.Landmark_UpRight.transform.localRotationEuler, this.moveSpeed, this);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    btnOnClick() {\r\n        lwg.Click.on(Click.ClickType.largen, null, this.BtnLast, this, null, null, this.btnLastUp, null);\r\n    }\r\n    btnLastUp(e) {\r\n        this.lastPosX = null;\r\n        this.lastPosY = null;\r\n        this.lastPosY = null;\r\n        this.BtnLast.visible = false;\r\n        this.moveSwitch = false;\r\n        e.stopPropagation();\r\n        GVariate._taskNum++;\r\n        this.mainCameraMove();\r\n        EventAdmin.notify(GEnum.EventType.taskProgress);\r\n        if (this._numZoder[GVariate._taskNum].value <= 3) {\r\n            EventAdmin.notify(EventAdmin.EventType.taskReach);\r\n        }\r\n    }\r\n    onStageMouseDown(e) {\r\n        this.moveSwitch = true;\r\n        this.touchPosX = e.stageX;\r\n        this.touchPosY = e.stageY;\r\n        if (GVariate._taskArr[GVariate._taskNum] === GEnum.TaskType.sideHair) {\r\n            return;\r\n        }\r\n        let Camera = GSene3D.MainCamera.getChildByName('MainCamera');\r\n        let pointknife = Tools.transitionScreenPointfor3D(GSene3D.knife.transform.position, Camera);\r\n        let pointHead = Tools.transitionScreenPointfor3D(GSene3D.Headcollision.transform.position, Camera);\r\n        let diffX = pointknife.x - pointHead.x;\r\n        let diffY = pointknife.y - pointHead.y;\r\n        let touchDiffX = this.touchPosX - diffX;\r\n        let touchDiffY = this.touchPosY - diffY;\r\n        let hitResult_Diff = Tools.rayScanning(Camera, GSene3D.GameMain3D, new Laya.Vector2(touchDiffX, touchDiffY), GSene3D.TouchScreen.name);\r\n        if (hitResult_Diff) {\r\n            GSene3D.HeadSimulate.transform.position = hitResult_Diff.point;\r\n        }\r\n    }\r\n    onStageMouseMove(e) {\r\n        if (!Admin._gameStart) {\r\n            return;\r\n        }\r\n        if (this.moveSwitch) {\r\n            let diffX = e.stageX - this.touchPosX;\r\n            let diffY = e.stageY - this.touchPosY;\r\n            this.Rocker.x += diffX;\r\n            this.Rocker.y += diffY;\r\n            this.touchPosX = e.stageX;\r\n            this.touchPosY = e.stageY;\r\n            switch (GVariate._taskArr[GVariate._taskNum]) {\r\n                case GEnum.TaskType.sideHair:\r\n                    GSene3D.Razor.transform.localPositionX -= diffX * 0.01;\r\n                    GSene3D.Razor.transform.localPositionY -= diffY * 0.01;\r\n                    break;\r\n                case GEnum.TaskType.leftBeard:\r\n                    this.leftAndRightShaving();\r\n                    break;\r\n                case GEnum.TaskType.rightBeard:\r\n                    this.leftAndRightShaving();\r\n                    break;\r\n                case GEnum.TaskType.middleBeard:\r\n                    this.leftAndRightShaving();\r\n                    break;\r\n                case GEnum.TaskType.upRightBeard:\r\n                    this.leftAndRightShaving();\r\n                    break;\r\n                case GEnum.TaskType.upLeftBeard:\r\n                    this.leftAndRightShaving();\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    leftAndRightShaving() {\r\n        let hitResult = Tools.rayScanning(GSene3D.MainCamera.getChildByName('MainCamera'), GSene3D.GameMain3D, new Laya.Vector2(this.touchPosX, this.touchPosY), GSene3D.HeadSimulate.name);\r\n        if (hitResult) {\r\n            if (this.lastPosX === null || this.lastPosY === null || this.lastPosZ === null) {\r\n                this.lastPosX = hitResult.point.x;\r\n                this.lastPosY = hitResult.point.y;\r\n                this.lastPosZ = hitResult.point.z;\r\n            }\r\n            else {\r\n                let diffX = hitResult.point.x - this.lastPosX;\r\n                let diffY = hitResult.point.y - this.lastPosY;\r\n                let diffZ = hitResult.point.z - this.lastPosZ;\r\n                GSene3D.knife.transform.position = new Laya.Vector3(GSene3D.knife.transform.position.x + diffX, GSene3D.knife.transform.position.y + diffY, GSene3D.knife.transform.position.z + diffZ);\r\n                this.lastPosX = hitResult.point.x;\r\n                this.lastPosY = hitResult.point.y;\r\n                this.lastPosZ = hitResult.point.z;\r\n                GSene3D.knife.transform.lookAt(GSene3D.Headcollision.transform.position, new Laya.Vector3(0, 1, 0));\r\n            }\r\n        }\r\n        else {\r\n            this.lastPosX = null;\r\n            this.lastPosY = null;\r\n            this.lastPosY = null;\r\n        }\r\n    }\r\n    onStageMouseUp(e) {\r\n        this.lastPosX = null;\r\n        this.lastPosY = null;\r\n        this.lastPosY = null;\r\n        this.touchPosX = null;\r\n        this.touchPosY = null;\r\n        this.moveSwitch = false;\r\n    }\r\n}\r\n",
  "references": [
    "D:/Game/project/CutHair/Project/CutHair/src/script/Lwg_Template/lwg.ts",
    "D:/Game/project/CutHair/Project/CutHair/src/script/Lwg_Template/Global.ts"
  ]
}
