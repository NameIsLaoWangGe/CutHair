{
  "code": "import { lwg, Click, Animation3D, Tools, EventAdmin, Admin } from \"../Lwg_Template/lwg\";\r\nimport { GVariate, GEnum, GSene3D } from \"../Lwg_Template/Global\";\r\nexport default class UIOperation extends lwg.Admin.Scene {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._ray = new Laya.Ray(new Laya.Vector3(0, 0, 0), new Laya.Vector3(0, 0, 0));\r\n        this.outs = new Array();\r\n        this._numZoder = [];\r\n        this._sideHairNum = {\r\n            index: 0,\r\n            sum: 0,\r\n            switch: true,\r\n            value: 0,\r\n            set setValue(vals) {\r\n                this.value = vals;\r\n                if (this.switch) {\r\n                    console.log('剩余需要修理的头发', this.value);\r\n                    if (this.value <= 3) {\r\n                        this.switch = false;\r\n                        console.log('任务完成了！');\r\n                        EventAdmin.notify(EventAdmin.EventType.taskReach);\r\n                    }\r\n                }\r\n                EventAdmin.notify(GEnum.EventType.taskProgress);\r\n            }\r\n        };\r\n        this._leftBeardNum = {\r\n            index: 0,\r\n            sum: 0,\r\n            switch: true,\r\n            value: 0,\r\n            set setValue(vals) {\r\n                this.value = vals;\r\n                if (this.switch) {\r\n                    console.log('剩余需要修理胡须的数量', this.value);\r\n                    if (this.value <= 3) {\r\n                        console.log('任务完成了！');\r\n                        this.switch = false;\r\n                        EventAdmin.notify(EventAdmin.EventType.taskReach);\r\n                    }\r\n                }\r\n                EventAdmin.notify(GEnum.EventType.taskProgress);\r\n            }\r\n        };\r\n        this._rightBeardNum = {\r\n            index: 0,\r\n            sum: 0,\r\n            switch: true,\r\n            value: 0,\r\n            set setValue(vals) {\r\n                this.value = vals;\r\n                if (this.switch) {\r\n                    console.log('剩余需要修理胡须的数量', this.value);\r\n                    if (this.value <= 3) {\r\n                        console.log('任务完成了！');\r\n                        this.switch = false;\r\n                        EventAdmin.notify(EventAdmin.EventType.taskReach);\r\n                    }\r\n                }\r\n                EventAdmin.notify(GEnum.EventType.taskProgress);\r\n            }\r\n        };\r\n        this._middleBeardNum = {\r\n            index: 0,\r\n            sum: 0,\r\n            switch: true,\r\n            value: 0,\r\n            set setValue(vals) {\r\n                this.value = vals;\r\n                if (this.switch) {\r\n                    console.log('剩余需要修理胡须的数量', this.value);\r\n                    if (this.value <= 3) {\r\n                        console.log('任务完成了！');\r\n                        this.switch = false;\r\n                        EventAdmin.notify(EventAdmin.EventType.taskReach);\r\n                    }\r\n                }\r\n                EventAdmin.notify(GEnum.EventType.taskProgress);\r\n            }\r\n        };\r\n        this.moveSpeed = 1000;\r\n        this.moveSwitch = false;\r\n    }\r\n    selfNode() {\r\n        this.Rocker = this.self['Rocker'];\r\n        this.TaskBar = this.self['TaskBar'];\r\n        this.BtnLast = this.self['BtnLast'];\r\n    }\r\n    lwgOnEnable() {\r\n        GVariate._taskNum = 0;\r\n        lwg.Admin._gameStart = true;\r\n        GVariate._taskArr = [GEnum.TaskType.sideHair, GEnum.TaskType.rightBeard, GEnum.TaskType.middleBeard, GEnum.TaskType.leftBeard];\r\n        this.createProgress();\r\n        this.BtnLast.visible = false;\r\n        this.createTaskContent();\r\n        this.mainCameraMove();\r\n    }\r\n    lwgEventReg() {\r\n        EventAdmin.reg(EventAdmin.EventType.taskReach, this, () => {\r\n            if (GVariate._taskNum >= GVariate._taskArr.length - 1) {\r\n                Admin._openScene(Admin.SceneName.UIVictory, null, null, f => {\r\n                });\r\n            }\r\n            else {\r\n                this.BtnLast.visible = true;\r\n            }\r\n        });\r\n        EventAdmin.reg(EventAdmin.EventType.defeated, this, () => {\r\n            Admin._gameStart = false;\r\n            Admin._openScene(Admin.SceneName.UIDefeated, null, null, f => { });\r\n        });\r\n        EventAdmin.reg(EventAdmin.EventType.operrationRefresh, this, () => {\r\n            lwg.Admin._openScene(Admin.SceneName.UIOperation, null, this.self, () => { });\r\n        });\r\n        EventAdmin.reg(GEnum.EventType.leftBeard, this, () => {\r\n            this._leftBeardNum.setValue = this._leftBeardNum.value - 0.5;\r\n        });\r\n        EventAdmin.reg(GEnum.EventType.rightBeard, this, () => {\r\n            this._rightBeardNum.setValue = this._rightBeardNum.value - 0.5;\r\n        });\r\n        EventAdmin.reg(GEnum.EventType.middleBeard, this, () => {\r\n            this._middleBeardNum.setValue = this._middleBeardNum.value - 0.5;\r\n        });\r\n        EventAdmin.reg(GEnum.EventType.taskProgress, this, () => {\r\n            let TaskBar = this.TaskBar.getChildAt(GVariate._taskNum);\r\n            let Bar = TaskBar.getChildByName('Bar');\r\n            let sum;\r\n            let value;\r\n            switch (GVariate._taskArr[GVariate._taskNum]) {\r\n                case GEnum.TaskType.sideHair:\r\n                    value = this._sideHairNum.value;\r\n                    sum = this._sideHairNum.sum;\r\n                    break;\r\n                case GEnum.TaskType.leftBeard:\r\n                    value = this._leftBeardNum.value;\r\n                    sum = this._leftBeardNum.sum;\r\n                    break;\r\n                case GEnum.TaskType.rightBeard:\r\n                    value = this._rightBeardNum.value;\r\n                    sum = this._rightBeardNum.sum;\r\n                    break;\r\n                case GEnum.TaskType.middleBeard:\r\n                    value = this._middleBeardNum.value;\r\n                    sum = this._middleBeardNum.sum;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            Bar.mask.x = (sum - value) * Bar.width / sum - Bar.mask.width;\r\n            if (Bar.mask.x > 0) {\r\n                Bar.mask.x = 0;\r\n            }\r\n        });\r\n    }\r\n    createProgress() {\r\n        let spacing = 100;\r\n        for (let index = 0; index < GVariate._taskArr.length; index++) {\r\n            const TaskPro = Laya.Pool.getItemByCreateFun('TaskPro', this.TaskProgress.create, this.TaskProgress);\r\n            this.TaskBar.addChild(TaskPro);\r\n            TaskPro.pos(index * spacing, 0);\r\n            let Bar = TaskPro.getChildByName('Bar');\r\n        }\r\n        this.TaskBar.width = GVariate._taskArr.length * spacing;\r\n        this.TaskBar.pivotX = this.TaskBar.width / 2;\r\n        this.TaskBar.x = Laya.stage.width / 2;\r\n    }\r\n    createTaskContent() {\r\n        for (let index = 0; index < GVariate._taskArr.length; index++) {\r\n            switch (GVariate._taskArr[index]) {\r\n                case GEnum.TaskType.sideHair:\r\n                    this._sideHairNum.setValue = GSene3D.HairParent.numChildren;\r\n                    this._sideHairNum.sum = GSene3D.HairParent.numChildren;\r\n                    this._sideHairNum.index = index;\r\n                    this.monitorHiarLen();\r\n                    this._numZoder.push(this._sideHairNum);\r\n                    break;\r\n                case GEnum.TaskType.leftBeard:\r\n                    this._leftBeardNum.setValue = GSene3D.LeftBeard.numChildren;\r\n                    this._leftBeardNum.sum = GSene3D.LeftBeard.numChildren;\r\n                    this._leftBeardNum.index = index;\r\n                    this._numZoder.push(this._leftBeardNum);\r\n                    break;\r\n                case GEnum.TaskType.rightBeard:\r\n                    this._rightBeardNum.setValue = GSene3D.RightBeard.numChildren;\r\n                    this._rightBeardNum.sum = GSene3D.RightBeard.numChildren;\r\n                    this._rightBeardNum.index = index;\r\n                    this._numZoder.push(this._rightBeardNum);\r\n                    break;\r\n                case GEnum.TaskType.middleBeard:\r\n                    this._middleBeardNum.setValue = GSene3D.RightBeard.numChildren;\r\n                    this._middleBeardNum.sum = GSene3D.RightBeard.numChildren;\r\n                    this._middleBeardNum.index = index;\r\n                    this._numZoder.push(this._middleBeardNum);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    monitorHiarLen() {\r\n        let _sideHairNum = this._sideHairNum;\r\n        for (let index = 0; index < GSene3D.HairParent.numChildren; index++) {\r\n            const element = GSene3D.HairParent.getChildAt(index);\r\n            let len = element.transform.localPositionY;\r\n            element['HairLen'] = {\r\n                detection: true,\r\n                value: len,\r\n                get getValue() {\r\n                    return this.value;\r\n                },\r\n                set setValue(v) {\r\n                    if (this.detection) {\r\n                        if (v < 0.13) {\r\n                            this.detection = false;\r\n                            _sideHairNum.setValue = _sideHairNum.value - 1;\r\n                        }\r\n                        this.value = v;\r\n                    }\r\n                    else {\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n    mainCameraMove() {\r\n        if (GVariate._taskNum > GVariate._taskArr.length) {\r\n            return;\r\n        }\r\n        switch (GVariate._taskArr[GVariate._taskNum]) {\r\n            case GEnum.TaskType.leftBeard:\r\n                GSene3D.knife.transform.localPosition = new Laya.Vector3(0.02, 0.132, 1.321);\r\n                GSene3D.knife.transform.localRotationEuler = new Laya.Vector3(0, 325.577 + 90, 0);\r\n                this.setCamera(GSene3D.Landmark_Left.transform.position, GSene3D.Landmark_Left.transform.localRotationEuler, this.moveSpeed);\r\n                break;\r\n            case GEnum.TaskType.rightBeard:\r\n                Animation3D.MoveTo(GSene3D.MainCamera, GSene3D.Landmark_Right.transform.position, 1000, this);\r\n                Animation3D.RotateTo(GSene3D.MainCamera, GSene3D.Landmark_Right.transform.localRotationEuler, 1000, this);\r\n                break;\r\n            case GEnum.TaskType.sideHair:\r\n                this.setCamera(GSene3D.Landmark_Side.transform.position, GSene3D.Landmark_Side.transform.localRotationEuler, this.moveSpeed);\r\n                break;\r\n            case GEnum.TaskType.middleBeard:\r\n                this.setCamera(GSene3D.Landmark_Middle.transform.position, GSene3D.Landmark_Middle.transform.localRotationEuler, this.moveSpeed);\r\n                break;\r\n            case GEnum.TaskType.topHead:\r\n                this.setCamera(GSene3D.Landmark_Top.transform.position, GSene3D.Landmark_Top.transform.localRotationEuler, this.moveSpeed);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    setCamera(v3_Pos, v3_Rotate, speed) {\r\n        let moveTarget = GSene3D.MainCamera.transform.position;\r\n        Laya.Tween.to(moveTarget, {\r\n            x: v3_Pos.x, y: v3_Pos.y, z: v3_Pos.z, update: new Laya.Handler(this, f => {\r\n                GSene3D.MainCamera.transform.position = (new Laya.Vector3(moveTarget.x, moveTarget.y, moveTarget.z));\r\n            })\r\n        }, speed, null);\r\n        let rotateTarget = GSene3D.MainCamera.transform.localRotationEuler;\r\n        Laya.Tween.to(rotateTarget, {\r\n            x: v3_Rotate.x, y: v3_Rotate.y, z: v3_Rotate.z, update: new Laya.Handler(this, f => {\r\n                GSene3D.MainCamera.transform.localRotationEulerX = (new Laya.Vector3(rotateTarget.x, rotateTarget.y, rotateTarget.z)).x;\r\n                GSene3D.MainCamera.transform.localRotationEulerY = (new Laya.Vector3(rotateTarget.x, rotateTarget.y, rotateTarget.z)).y;\r\n                GSene3D.MainCamera.transform.localRotationEulerZ = (new Laya.Vector3(rotateTarget.x, rotateTarget.y, rotateTarget.z)).z;\r\n            })\r\n        }, speed, null);\r\n    }\r\n    btnOnClick() {\r\n        lwg.Click.on(Click.ClickType.largen, null, this.BtnLast, this, null, null, this.btnLastUp, null);\r\n    }\r\n    btnLastUp(e) {\r\n        this.BtnLast.visible = false;\r\n        this.moveSwitch = false;\r\n        e.stopPropagation();\r\n        GVariate._taskNum++;\r\n        this.mainCameraMove();\r\n        EventAdmin.notify(GEnum.EventType.taskProgress);\r\n        if (this._numZoder[GVariate._taskNum].value <= 3) {\r\n            EventAdmin.notify(EventAdmin.EventType.taskReach);\r\n        }\r\n    }\r\n    onStageMouseDown(e) {\r\n        this.moveSwitch = true;\r\n        this.touchPosX = e.stageX;\r\n        this.touchPosY = e.stageY;\r\n    }\r\n    onStageMouseMove(e) {\r\n        if (!Admin._gameStart) {\r\n            return;\r\n        }\r\n        if (this.moveSwitch) {\r\n            let diffX = e.stageX - this.touchPosX;\r\n            let diffY = e.stageY - this.touchPosY;\r\n            this.Rocker.x += diffX;\r\n            this.Rocker.y += diffY;\r\n            this.touchPosX = e.stageX;\r\n            this.touchPosY = e.stageY;\r\n            switch (GVariate._taskArr[GVariate._taskNum]) {\r\n                case GEnum.TaskType.sideHair:\r\n                    GSene3D.Razor.transform.localPositionX -= diffX * 0.01;\r\n                    GSene3D.Razor.transform.localPositionY -= diffY * 0.01;\r\n                    break;\r\n                case GEnum.TaskType.leftBeard:\r\n                    this.leftAndRightShaving();\r\n                    break;\r\n                case GEnum.TaskType.rightBeard:\r\n                    this.leftAndRightShaving();\r\n                    break;\r\n                case GEnum.TaskType.middleBeard:\r\n                    this.leftAndRightShaving();\r\n                    break;\r\n                case GEnum.TaskType.topHead:\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    leftAndRightShaving() {\r\n        let hitResult = this.rayDetection();\r\n        if (hitResult) {\r\n            let p = Tools.twoSubV3_3D(hitResult.point, GSene3D.TouchHead.transform.position, true);\r\n            let len = Tools.twoObjectsLen_3D(GSene3D.knife, GSene3D.TouchHead);\r\n            let unit = 0.1 * (1.05 - len);\r\n            GSene3D.knife.transform.position = new Laya.Vector3(hitResult.point.x + p.x * unit, hitResult.point.y + p.y * unit, hitResult.point.z + p.z * unit);\r\n            GSene3D.knife.transform.lookAt(GSene3D.TouchHead.transform.position, new Laya.Vector3(0, 1, 0));\r\n        }\r\n    }\r\n    rayDetection() {\r\n        let Camera = GSene3D.MainCamera.getChildByName('MainCamera');\r\n        Camera.viewportPointToRay(new Laya.Vector2(this.touchPosX, this.touchPosY), this._ray);\r\n        GSene3D.GameMain3D.physicsSimulation.rayCastAll(this._ray, this.outs);\r\n        if (this.outs.length != 0) {\r\n            let outsChaild = null;\r\n            let TouchHead = null;\r\n            for (var i = 0; i < this.outs.length; i++) {\r\n                let hitResult = this.outs[i].collider.owner;\r\n                if (hitResult.name === 'TouchHead') {\r\n                    TouchHead = hitResult;\r\n                    outsChaild = this.outs[i];\r\n                }\r\n            }\r\n            return outsChaild;\r\n        }\r\n    }\r\n    onStageMouseUp(e) {\r\n        this.moveSwitch = false;\r\n    }\r\n    lwgOnUpdate() {\r\n    }\r\n}\r\n",
  "references": [
    "D:/Game/project/CutHair/Project/CutHair/src/script/Lwg_Template/lwg.ts",
    "D:/Game/project/CutHair/Project/CutHair/src/script/Lwg_Template/Global.ts"
  ]
}
